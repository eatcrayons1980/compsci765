# This is our rule database and should
# contain forward-chaining and backward-chaining
# inference rules.

# FORWARD CHAINING RULES

# If A is friends with B,
# then B is friends with A.
associative_property_of_friendship
    foreach
        longterm.friends($person1, $person2)
    assert
        longterm.friends($person2, $person1)

# If A is similar to B,
# then B is similar to A.
associative_property_of_similarity
    foreach
        longterm.similar_to($loc1, $loc2)
    assert
        longterm.similar_to($loc2, $loc1)

# If A is similar to B
# and B is similar to C,
# then A is similar to C.
transitive_property_of_similarity
    foreach
        longterm.similar_to($loc1, $loc2)
        longterm.similar_to($loc2, $loc3)
        check $loc1 != $loc3
    assert
        longterm.similar_to($loc1, $loc3)
        longterm.similar_to($loc3, $loc1)



# USER INITIALIZATION RULES

# If there is no current user,
# ask for the user name.
user_login
    foreach
        notany
            shortterm.current_user($_,())
        travelquestions.user_name($n)
        $date = str(datetime.date.today())
        $name = ($n).encode('ascii', 'ignore')
    assert
        shortterm.current_user($name, ())
        longterm.logged_in($name, $date)

# If we have not initialized the user yet,
# ask if they've been on a recent trip.
user_new_trip
    foreach
        notany
            shortterm.init_complete((),())
        shortterm.current_user($name, ())
        travelquestions.new_trip(True)
        travelquestions.new_trip_location($p)
        travelquestions.weather_trip($w)
        $place = ($p).encode('ascii', 'ignore')
        $weather = ($w).encode('ascii','ignore')
    assert
        shortterm.last_trip($place, ())
        longterm.travelled_to($name, $place)
        longterm.weather_cond($place, $weather)

# If the user told us about a recent trip
# and we don't know any activities for it
# and the answer to the activity question isn't 'nothing'.
# then store their answer as an activity for that location.
ask_about_activity
    foreach
        notany
            shortterm.init_complete((),())
        notany
            shortterm.no_more_activities($place, ())
        shortterm.last_trip($place, ())
        notany
            shortterm.has_activity($place, $_, 1)
        travelquestions.trip_activity_1($a)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity != 'nothing'
    assert
        shortterm.has_activity($place, $activity, 1)
        longterm.has_activity($place, $activity)

# If the user told us about a recent trip
# and we don't know any activities for it
# and the answer to the activity question is 'nothing'.
# then store that we are done with activities at this location.
ask_about_activity_nothing
    foreach
        notany
            shortterm.init_complete((),())
        notany
            shortterm.no_more_activities($place, ())
        shortterm.last_trip($place, ())
        notany
            shortterm.has_activity($place, $_, 1)
        travelquestions.trip_activity_1($a)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity == 'nothing'
    assert
        shortterm.no_more_activities($place, ())

# If the users has told us about activities on their last trip
# but the answer to the another activity question isn't 'no',
# then store their answer as another activity for that location.
ask_about_another_activity
    foreach
        notany
            shortterm.init_complete((),())
        notany
            shortterm.no_more_activities($place, ())
        shortterm.has_activity($place, $_, $value1)
        forall
            shortterm.has_activity($place, $_, $value2)
        require
            check $value1 >= $value2
        $value = $value1 + 1
        travelquestions.trip_activity_2($a, $value)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity != 'no'
    assert
        shortterm.has_activity($place, $activity, $value)
        longterm.has_activity($place, $activity)

# If the users has told us about activities on their last trip
# but the answer to the another activity question is 'no',
# then store that we are done with activities at this location.
ask_about_another_activity_no
    foreach
        notany
            shortterm.init_complete((),())
        notany
            shortterm.no_more_activities($place, ())
        shortterm.has_activity($place, $_, $value1)
        forall
            shortterm.has_activity($place, $_, $value2)
        require
            check $value1 >= $value2
        $value = $value1 + 1
        travelquestions.trip_activity_2($a, $value)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity == 'no'
    assert
        shortterm.no_more_activities($place, ())

# If the last trip has no place in the location hierarchy,
# then ask where the location of the trip is located.
location_hierarchy
    foreach
        notany
            shortterm.init_complete((),())
        shortterm.last_trip($place, ())
        notany
            longterm.is_in($place, $_)
        notany
            longterm.is_in($_, $place)
        travelquestions.location_hierarchy($l, $place)
        $location = ($l).encode('ascii', 'ignore')
        check $location != 'idk'
    assert
        shortterm.last_trip($location, ())
        longterm.is_in($place, $location)

# If the location of the trip is at the top of the hierarchy,
# then ask the user where in the location they travelled.
location_hierarchy_a
    foreach
        notany
            shortterm.init_complete((),())
        shortterm.last_trip($place, ())
        notany
            longterm.is_in($place, $_)
        travelquestions.location_hierarchy_a($l, $place)
        $location = ($l).encode('ascii', 'ignore')
        check $location != 'idk'
    assert
        shortterm.last_trip($location, ())
        longterm.is_in($location, $place)



# LOOP RULES (AFTER USER INITIALIZATION)

# Infer other hierarchy facts.
infer_hierarchy
    foreach
        longterm.is_in($a, $b)
        longterm.is_in($b, $c)
        check $a != $b
        check $a != $c
        check $b != $c
    assert
        longterm.is_in($a, $c)

# If the current user like an activity
# then they have an opinion on that activity.
has_opinion_likes
    foreach
        shortterm.current_user($user, ())
        longterm.likes_activity($user, $activity)
    assert
        shortterm.has_opinion_on($user, $activity)

# If the current user dislikes an activity
# then they have an opinion on that activity.
has_opinion_dislikes
    foreach
        shortterm.current_user($user, ())
        longterm.dislikes_activity($user, $activity)
    assert
        shortterm.has_opinion_on($user, $activity)

# Set frustration to 0.
init_frustration
    foreach
        notany
            shortterm.frustration($_, ())
    assert
        shortterm.frustration(0, ())

acquire_knowledge_likes
    foreach
        shortterm.current_user($user, ())
        shortterm.frustration($f, ())
        forall
            shortterm.frustration($f2, ())
        require
            check $f >= $f2
        notany
            shortterm.acquired_knowledge($f, ())
        first
            longterm.has_activity($place, $activity)
            notany
                shortterm.has_opinion_on($user, $activity)
            travelquestions.q_likes_activity($activity, $ans)
        check $ans == True
    assert
        shortterm.acquired_knowledge($f, ())
        shortterm.has_opinion_on($user, $activity)
        longterm.likes_activity($user, $activity)

acquire_knowledge_dislikes
    foreach
        shortterm.current_user($user, ())
        shortterm.frustration($f, ())
        forall
            shortterm.frustration($f2, ())
        require
            check $f >= $f2
        notany
            shortterm.acquired_knowledge($f, ())
        first
            longterm.has_activity($place, $activity)
            notany
                shortterm.has_opinion_on($user, $activity)
            travelquestions.q_likes_activity($activity, $ans)
        check $ans == False
    assert
        shortterm.acquired_knowledge($f, ())
        shortterm.has_opinion_on($user, $activity)
        longterm.dislikes_activity($user, $activity)

fc_extras
    import datetime



# BACKWARD CHAINING RULES

recommender_same_activities
    use recommender_same_activities($place1, $random)
    when
        check $random < 20
        shortterm.current_user($user, ())
        longterm.travelled_to($user, $place2)
        longterm.has_activity($place1, $activity)
        longterm.has_activity($place2, $activity)
        check $place1 != $place2
        notany
            longterm.is_in($place1, $place2)
        notany
            longterm.is_in($place2, $place1)
        notany
            travelrules.specific_location_activity($activity, $place1, $_)
        travelquestions.confirm_recommendation($place1, True)

recommender_likes_activities
    use recommender_likes_activities($place1, $random)
    when
        check $random < 20
        shortterm.current_user($user, ())
        longterm.likes_activity($user, $activity)
        longterm.has_activity($place, $activity)
        notany
            travelrules.specific_location_activity($activity, $place, $_)
        travelquestions.confirm_recommendation($place, True)

recommender_same_weather
    use recommender_same_weather($place1,$random)
    when
        check $random < 20
        shortterm.current_user($user,())
        longterm.travelled_to($user, $place2)
        longterm.weather_cond($place1, $weather)
        longterm.weather_cond($place2, $weather)
        check $place1 != $place2
        notany
            travelrules.specific_location_weather($weather, $place1, $_)
        travelquestions.confirm_recommendation($place1, True)

recommender_same_weather_activities
    use recommender_same_weather($place1,$random)
    when
        check $random < 20
        shortterm.current_user($user,())
        longterm.travelled_to($user, $place2)
        longterm.weather_cond($place1, $weather)
        longterm.weather_cond($place2, $weather)
        longterm.has_activity($place1, $activity)
        longterm.has_activity($place2, $activity)
        check $place1 != $place2
        notany
            longterm.is_in($place1, $place2)
        notany
            longterm.is_in($place2, $place1)
        notany
            travelrules.specific_location_activity($activity, $place1, $_)
        notany
            travelrules.specific_location_weather($weather, $place1, $_)
        travelquestions.confirm_recommendation($place1, True)

specific_location_activity
    use specific_location_activity($activity, $place, $subplace)
    when
        longterm.is_in($subplace, $place)
        longterm.has_activity($place, $activity)
        longterm.has_activity($subplace, $activity)

specific_location_weather
    use specific_location_weather($weather, $place, $subplace)
    when
        longterm.is_in($subplace, $place)
        longterm.weather_cond($place, $weather)
        longterm.weather_cond($subplace, $weather)

