# This is our rule database and should
# contain forward-chaining and backward-chaining
# inference rules.

# FORWARD CHAINING RULES

associative_property_of_friendship
    foreach
        longterm.friends($person1, $person2)
    assert
        longterm.friends($person2, $person1)

associative_property_of_similarity
    foreach
        longterm.similar_to($loc1, $loc2)
    assert
        longterm.similar_to($loc2, $loc1)

transitive_property_of_similarity
    foreach
        longterm.similar_to($loc1, $loc2)
        longterm.similar_to($loc2, $loc3)
        check $loc1 != $loc3
    assert
        longterm.similar_to($loc1, $loc3)
        longterm.similar_to($loc3, $loc1)

user_login
    foreach
        travelquestions.user_name($n)
        $date = str(datetime.date.today())
        $name = ($n).encode('ascii', 'ignore')
    assert
        shortterm.current_user($name, ())
        longterm.logged_in($name, $date)

user_new_trip
    foreach
        shortterm.current_user($name, ())
        travelquestions.new_trip(True)
        travelquestions.new_trip_location($p)
        $place = ($p).encode('ascii', 'ignore')
    assert
        shortterm.last_trip($place, ())
        longterm.travelled_to($name, $place)

others_travelled_to_location
    foreach
        longterm.travelled_to($user, $place)
        shortterm.last_trip($place, ())
        shortterm.current_user($current, ())
        check $user != $current
    assert
        shortterm.also_been_there($user, $place)
        python print($user + " has also travelled to " + $place + "!")

ask_about_activity
    foreach
        shortterm.last_trip($place, ())
        notany
            shortterm.has_activity($place, $_, 1)
        travelquestions.trip_activity_1($a)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity != 'nothing'
    assert
        shortterm.has_activity($place, $activity, 1)
        longterm.has_activity($place, $activity)

ask_about_another_activity
    foreach
        shortterm.has_activity($place, $_, $value1)
        forall
            shortterm.has_activity($place, $_, $value2)
        require
            check $value1 >= $value2
        $value = $value1 + 1
        travelquestions.trip_activity_2($a, $value)
        $activity = ($a).encode('ascii', 'ignore')
        check $activity != 'no'
    assert
        shortterm.has_activity($place, $activity, $value)
        longterm.has_activity($place, $activity)

location_hierarchy
    foreach
        shortterm.last_trip($place, ())
        notany
            longterm.is_in($place, $_)
        notany
            longterm.is_in($_, $place)
        travelquestions.location_hierarchy($l, $place)
        $location = ($l).encode('ascii', 'ignore')
        check $location != 'idk'
    assert
        shortterm.last_trip($location, ())
        longterm.is_in($place, $location)

location_hierarchy_a
    foreach
        shortterm.last_trip($place, ())
        notany
            longterm.is_in($place, $_)
        travelquestions.location_hierarchy_a($l, $place)
        $location = ($l).encode('ascii', 'ignore')
        check $location != 'idk'
    assert
        shortterm.last_trip($location, ())
        longterm.is_in($location, $place)

infer_hierarchy
    foreach
        longterm.is_in($a, $b)
        longterm.is_in($b, $c)
        check $a != $b
        check $a != $c
        check $b != $c
    assert
        longterm.is_in($a, $c)

fc_extras
    import datetime



# BACKWARD CHAINING RULES

recommender_same_activities
    use recommender_same_activities($place1, $random)
    when
        check $random < 20
        shortterm.current_user($user, ())
        longterm.travelled_to($user, $place2)
        longterm.has_activity($place1, $activity)
        longterm.has_activity($place2, $activity)
        check $place1 != $place2
        notany
            longterm.is_in($place1, $place2)
        notany
            longterm.is_in($place2, $place1)
        notany
            travelrules.specific_location($activity, $place1, $_)
        travelquestions.confirm_recommendation($place1, True)

recommender_likes_activities
    use recommender_likes_activities($place1, $random)
    when
        check $random < 20
        shortterm.current_user($user, ())
        longterm.likes_activity($user, $activity)
        longterm.has_activity($place, $activity)
        notany
            travelrules.specific_location($activity, $place, $_)
        travelquestions.confirm_recommendation($place, True)

specific_location
    use specific_location($activity, $place, $subplace)
    when
        longterm.is_in($subplace, $place)
        longterm.has_activity($place, $activity)
        longterm.has_activity($subplace, $activity)

